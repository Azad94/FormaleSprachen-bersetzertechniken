package recursiveDescent;

import ast.Add;
import ast.Div;

public class IndependentEvaluationVisitor {
	
	public IndependentEvaluationVisitor(){
		
	}
	
	public double eval(HeteroAST n) {
		double result = 0.0;
        switch ( n.getToken().getType()) {
            case RDLexer.PLUS : result = eval((Add)n); break;
            case RDLexer.MINUS : result = eval((Sub)n); break;
            case RDLexer.MUL : result = eval((Mul)n); break;
            case RDLexer.DIV : result = eval((Div)n); break;
            case RDLexer.INT : result = eval((Int)n); break;
            case RDLexer.UMIN: result = eval((UMinus)n); break;
            default :
                // catch unhandled node types
                throw new UnsupportedOperationException("Node "+
                          n.getClass().getName()+ " not handled");
        }
		return result;
    }
	
    public double eval(Add n) {
    	return eval(n.getLeft()) + eval(n.getRight());
    }
  

    public double eval(Sub n) {
    	return eval(n.getLeft()) - eval(n.getRight());
    }
	
    public double eval(Mul n) {
    	return eval(n.getLeft()) * eval(n.getRight());
    }
	
    public double eval(Div n) {
    	return eval(n.getLeft()) / eval(n.getRight());
    }
    
	
    public double eval(UMinus n) {
    	return -eval(n.getChild());
    }
	
    public double eval(Int n) {
        return Double.parseDouble(n.toString());
    }
}
