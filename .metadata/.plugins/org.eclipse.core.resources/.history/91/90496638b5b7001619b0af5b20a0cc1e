package recursiveDescent;

import ast.Add;
import ast.Div;
import ast.Int;
import ast.Mul;
import ast.Sub;
import ast.UMinus;
import visitor.Visitor;

public class EvaluationVisitor implements Visitor<Double> {

	private Double result;

	public EvaluationVisitor() {
		this.result = 0.0;
	}

	public Double getRes() {
		return this.result;
	}

	@Override
	public Double visit(Add n) {
		return result += n.getLeft().accept(this) + n.getRight().accept(this);
	}

	@Override
	public Double visit(Sub n) {
		return result += n.getLeft().accept(this) - n.getRight().accept(this);
	}

	@Override
	public Double visit(UMinus n) {
		result -= n.getChild().accept(this);
		return null;
	}

	@Override
	public Double visit(Mul n) {
		return result += (n.getLeft().accept(this) * n.getRight().accept(this));
	}

	@Override
	public Double visit(Div n) {
		return result += (n.getLeft().accept(this) / n.getRight().accept(this));
	}

	@Override
	public Double visit(Int n) {
		return Double.parseDouble(n.toString());
	}

}
