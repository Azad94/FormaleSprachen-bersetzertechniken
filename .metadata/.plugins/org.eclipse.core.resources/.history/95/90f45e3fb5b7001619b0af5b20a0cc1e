package lexer_parser;

import recursiveDescent.Token;

public class RDLexer extends Lexer {

	public static final int PLUS = 2;
	public static final int MINUS = 3;
	public static final int MUL = 4;
	public static final int DIV = 5;
	public static final int LB = 6;
	public static final int RB = 7;
	public static final int INT = 8;
	public static final int NL = 9;

	public static final int ID = 10;
	public static final int EQ = 11;
	
	public static final int UMIN = 12;

	public static String[] tokenNames = { "n/a", "<EOF>", "PLUS", "MINUS", "MUL", "DIV", "LB", "RB", "INT", "NL", "ID", "EQ", "UMIN"};

	public String getTokenName(int x) {
		return tokenNames[x];
	}

	public RDLexer(String input) {
		super(input);
	}

	boolean isNUMBER() {
		return c >= '0' && c <= '9';
	}

	boolean isLETTER() {
		return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
	}

	public Token nextToken() {
		while (c != EOF) {
			switch (c) {
			case ' ':
			case '\t':
			case '\r':
				WS();
				continue;
			case '+':
				consume();
				return new Token(PLUS, "+");
			case '-':
				consume();
				return new Token(MINUS, "-");
			case '*':
				consume();
				return new Token(MUL, "*");
			case '/':
				consume();
				return new Token(DIV, "/");
			case '(':
				consume();
				return new Token(LB, "(");
			case ')':
				consume();
				return new Token(RB, ")");
			case '\n':
				consume();
				return new Token(NL, "\n");
			case '=':
				consume();
				return new Token(EQ, "=");
			case '#': 
				consume();
				return new Token(UMIN, "#");
			default:
				if (isNUMBER())
					return NUMBER();
				else if (isLETTER())
					return LETTER();
				throw new Error("invalid character: " + c);
			}
		}
		return new Token(EOF_TYPE, "<EOF>");
	}

	Token NUMBER() {
		StringBuilder buf = new StringBuilder();
		do {
			buf.append(c);
			consume();
		} while (isNUMBER());
		return new Token(INT, buf.toString());
	}
	
	Token LETTER() {
		StringBuilder buf = new StringBuilder();
		do {
			buf.append(c);
			consume();
		} while (isLETTER() || isNUMBER());
		return new Token(ID, buf.toString());
	}

	void WS() {
		while (c == ' ' || c == '\t' || c == '\r')
			consume();
	}
}
