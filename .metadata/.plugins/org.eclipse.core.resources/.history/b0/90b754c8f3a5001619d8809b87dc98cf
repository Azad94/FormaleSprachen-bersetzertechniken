/**
 * Define sheraz
 */
grammar ExpRec;
r : stat+;
stat : expr NEWLINE
| ID '=' expr NEWLINE
| NEWLINE
;
expr:<assoc=right> expr '^' expr  // ^ operator is right associative
| expr ('*'|'/') expr // match subexpressions joined with '*' operator
| expr ('+'|'-') expr // match subexpressions joined with '+' operator
| expr ('<'|'>') expr
| expr ('=') expr
| INT
| ID
| '(' expr ')'
;

ID : [a-zA-Z]+ ; // match identifiers
INT : [0-9]+ ; // match integers
NEWLINE:'\r'? '\n' ; // return newlines to parser (end-statement signal)
WS : [ \t]+ -> skip ; // toss out whitespace

/**
 
 grammar Syntax;

statlist : stat+;
stat : (comparison NL |NL | (ID|sum) EQUALS sum NL);
comparison : sum (('<' |'>') sum)?;
sum : prod ((PLUS|MINUS)prod)*;
prod : potenz ((MULTI|DIV)potenz)*;
potenz : term ('^' term)* ;
term : PLUS term | MINUS term | INTEGER | ID | LBRACK sum RBRACK;


ID : LETTER [DIGIT|LETTER]*;
INTEGER : DIGIT+;
PLUS : [+];
MINUS : [-];
MULTI: [*];
DIV : [/]; 
LBRACK :[(];
RBRACK : [)];
EQUALS : [=];
NL: [\n];  
IGNORE: ( WHITESPACE ) -> skip;  

fragment DIGIT: [0-9];
fragment LETTER: [a-zA-Z];
fragment WHITESPACE : [ \t\r]  ;
 */
 