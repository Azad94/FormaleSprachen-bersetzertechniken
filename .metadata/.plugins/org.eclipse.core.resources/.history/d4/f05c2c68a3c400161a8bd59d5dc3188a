package graph;

import java.util.Set;

import org.antlr.v4.misc.Graph;
import org.antlr.v4.runtime.misc.MultiMap;
import org.antlr.v4.runtime.misc.OrderedHashSet;

import cymbol_grammar.CymbolBaseListener;
import cymbol_grammar.CymbolParser;

class CallGraph {

	Set<String> nodes = new OrderedHashSet<String>();
	MultiMap<String, String> edges = new MultiMap<String, String>();
	
	public void edge(String source, String target) {
        edges.map(source, target);
    }
	
	public String toDOT(){
		
		StringBuilder buf = new StringBuilder();
		buf.append("digraph G {\n");
		buf.append(" ranksep=.25;\n");
		buf.append(" edge [arrowsize=.5]\n");
		buf.append(" node [shape=circle, fontname=\"ArialNarrow\",\n"); 
		buf.append(" fontsize=12, fixedsize=true, height=.45];\n"); 
		buf.append(" ");
		
		// print all nodes first
		for (String node : nodes) 
		{ 
	        buf.append(node);
	        buf.append("; "); 
	    }
		
		buf.append("\n");
		
		for (String src : edges.keySet()) {
			for (String trg : edges.get(src)) { 
				buf.append(" "); buf.append(src);
				buf.append(" -> "); buf.append(trg); 
				buf.append(";\n");
			} 
		}

		buf.append("}\n");
		return buf.toString();	
	}
	
	class FunctionListener extends CymbolBaseListener {
		
		Graph<?> graph = new Graph();
		Graph.Node<?> g;
		
		String currentFunctionName = null;

		public void enterFunctionDecl(CymbolParser.FunctionDeclContext ctx) {
			currentFunctionName = ctx.ID().getText();
			//graph.nodes.add(currentFunctionName);
			
		}
		
		public void e(CymbolParser.StatFuncCallContext c){
			String funcName;
			graph.edge(currentFunctionName, funcName);
			
		}
		
		/*
		public void exitCall(CymbolParser.CallContext ctx) {
			String funcName = ctx.ID().getText();
			// map current function to the callee 
			graph.edge(currentFunctionName, funcName);
		}
		*/
	}
}
