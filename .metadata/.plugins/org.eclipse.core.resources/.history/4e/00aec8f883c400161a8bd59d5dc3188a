package metrics;

import java.io.FileInputStream;

import java.io.IOException;
import java.io.InputStream;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CharStream;
import org.antlr.v4.runtime.ANTLRInputStream;

import org.antlr.v4.runtime.CommonTokenStream;

import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import cymbol_grammar.CymbolLexer;
import cymbol_grammar.CymbolParser;
import cymbol_grammar.MetricListener;

public class Metrics {
	
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		
        //InputStream is = new FileInputStream("/Aufgabee_11/res/t1.cym");
        //ANTLRInputStream input = new ANTLRInputStream(is);    
        
        CharStream input = null;
    	// Pick an input stream (filename from commandline or stdin)
    	try {
    	      if (args.length > 0)
    	        input = new ANTLRFileStream(args[0]);
    	      else {
    	        input = (CharStream) new ANTLRInputStream(System.in);
    	        System.out.println("Eingabe");
    	      }
    	    } catch (IOException e) {
    	      System.err.println("Quelle nicht gefunden!");
    	      System.exit(1);
    	    }
        
		CymbolLexer lexer = new CymbolLexer((org.antlr.v4.runtime.CharStream) input);
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		CymbolParser parser = new CymbolParser(tokens);
		ParseTree tree = parser.file();
		
		ParseTreeWalker walker = new ParseTreeWalker(); // create standard walker
		MetricListener extractor = new MetricListener();
		walker.walk(extractor, tree); 
       
	}
}